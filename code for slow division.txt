module SlowDivision (
  input wire clk,
  input wire reset,
  input wire [7:0] dividend,
  input wire [7:0] divisor,
  output wire [7:0] quotient,
  output wire [7:0] remainder,
  output reg done
);
  reg [7:0] dividend_reg;
  reg [7:0] quotient_reg;
  reg [7:0] remainder_reg;
  reg [7:0] count_reg;

always @(posedge clk or posedge reset) begin
  if (reset) begin
    dividend_reg <= 8'b0;
    quotient_reg <= 8'b0;
    remainder_reg <= 8'b0;
    count_reg <= 8'b0;
    done <= 1'b0;
  end
  else begin
    if (count_reg == 8'b0) begin
      dividend_reg <= dividend;
      quotient_reg <= 8'b0;
      remainder_reg <= dividend;
      count_reg <= 8;
      done <= 1'b1;
    end
    else begin
      if (remainder_reg >= divisor) begin
        remainder_reg <= remainder_reg - divisor;
        quotient_reg <= quotient_reg | (1 << (count_reg - 1));
        end
     else begin
        quotient_reg <= quotient_reg & (~(1 << (count_reg - 1)));
      end
      count_reg <= count_reg - 1;
      done <= 1'b0;
    end
  end
end


assign quotient = quotient_reg;
assign remainder = remainder_reg;
endmodule
  
module SlowDivision_TB;
  reg clk;
  reg reset;
  reg [7:0] dividend;
  reg [7:0] divisor;
  wire [7:0] quotient;
  wire [7:0] remainder;
  wire done;

  SlowDivision uut (
    .clk(clk),
    .reset(reset),
    .dividend(dividend),
    .divisor(divisor),
    .quotient(quotient),
    .remainder(remainder),
    .done(done)
  );

  initial begin
    clk = 0;
    reset = 1;
    dividend = 8'b0;
    divisor = 8'b0;

    // Reset
    #10 reset = 0;

    // Test case 1
    #200;
    dividend = 8'b10101010;
    divisor = 8'b00110011;
    #200;

    // Test case 2
    #200;
    dividend = 8'b01010101;
    divisor = 8'b00001111;
    #200;

    // Test case 3
    #200;
    dividend = 8'b11110000;
    divisor = 8'b00000001;
    #200;

    // Test case 4
    #200;
    dividend = 8'b10010010;
    divisor = 8'b00000010;
    #200;

    // End simulation
    #10 $finish;
  end

  always begin
    #5 clk = ~clk;
  end

  // Display output
  always @(posedge clk) begin
    if (done) begin
      $display("Quotient = %b", quotient);
      $display("Remainder = %b", remainder);
    end
  end

endmodule
