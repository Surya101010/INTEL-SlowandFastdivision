module fast_division (
  input wire signed [15:0] dividend,
  input wire signed [7:0] divisor,
  output reg signed [15:0] quotient,
  output reg signed [7:0] remainder,
  output reg done
);
  
  reg signed [15:0] div_op;
  reg signed [7:0] div_op_abs;
  reg signed [7:0] shift_reg;
  reg signed [15:0] quotient_reg;
  reg signed [7:0] count;
  reg [3:0] state;
  
  always @(dividend) begin
    if (dividend < 0)
      div_op = -dividend;
    else
      div_op = dividend;
  end
  
always @(*) begin
  case (state)
    0: begin
      div_op = dividend;
      if (dividend < 0)
        div_op_abs = -dividend;
      else
        div_op_abs = dividend;
      shift_reg = divisor;
      count = 8;
      quotient_reg = 0;
      state = 1;
    end
      1: begin
        if (div_op[15] == 1'b0) begin
          shift_reg = shift_reg << 1;
          count = count - 1;
          state = 2;
        end
        else begin
          shift_reg = shift_reg >> 1;
          count = count - 1;
          state = 3;
        end
      end
      
      2: begin
        if (div_op_abs >= shift_reg) begin
          div_op = div_op - shift_reg;
          quotient_reg[count] = 1;
        end
        shift_reg = shift_reg >> 1;
        count = count - 1;
        if (count == 0)
          state = 4;
        else
          state = 1;
      end
      
      3: begin
        div_op = div_op + shift_reg;
        quotient_reg[count] = 0;
        shift_reg = shift_reg >> 1;
        count = count - 1;
        if (count == 0)
          state = 4;
        else
          state = 1;
      end
      
      4: begin
        remainder = div_op;
        quotient = quotient_reg;
        done = 1;
        state = 0;
      end
    endcase
  end
  
endmodule

module fast_division_testbench;
  
  reg signed [15:0] dividend;
  reg signed [7:0] divisor;
  wire signed [15:0] quotient;
  wire signed [7:0] remainder;
  wire done;
  
  fast_division dut (
    .dividend(dividend),
    .divisor(divisor),
    .quotient(quotient),
    .remainder(remainder),
    .done(done)
  );
  
  reg signed [15:0] expected_quotient;
  reg signed [7:0] expected_remainder;
  reg expected_done;
  
  always @(posedge done) begin
    expected_quotient <= quotient;
    expected_remainder <= remainder;
    expected_done <= done;
  end
  
  initial begin
    $dumpfile("fast_division.vcd");
    $dumpvars(0, fast_division_testbench);
    
    dividend = 256;
    divisor = 8;
    expected_quotient = dividend / divisor;
    expected_remainder = dividend % divisor;
    
    #10;
    
    dividend = -1234;
    divisor = 17;
    expected_quotient = dividend / divisor;
    expected_remainder = dividend % divisor;
    
    #10;
    
    dividend = 1024;
    divisor = -32;
    expected_quotient = dividend / divisor;
    expected_remainder = dividend % divisor;
    
    #10;
    
    $finish;
  end
  
  always @(posedge expected_done) begin
    $display("Dividend: %d, Divisor: %d, Quotient: %d, Remainder: %d", dividend, divisor, expected_quotient, expected_remainder);
  end
  
endmodule
