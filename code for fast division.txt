module goldschmidt_division (
  input wire [7:0] dividend,
  input wire [7:0] divisor,
  output wire [7:0] quotient
);

  reg [7:0] dividend_reg;
  reg [7:0] divisor_reg;
  reg [7:0] quotient_reg;
  reg [7:0] multiplicand;
  reg [7:0] multiplier;
  reg [3:0] count;
  reg sign;

  always @(dividend or divisor) begin
    dividend_reg <= dividend;
    divisor_reg <= divisor;
    quotient_reg <= 8'b00000000;
    multiplicand <= dividend_reg;
    multiplier <= divisor_reg;
    count <= 4'b0000;
    sign <= 1'b0;
  end

  always @(posedge clk) begin
    if (count < 4'b1000) begin
      if (multiplier[count] == 1'b1)
        multiplicand <= multiplicand + (dividend_reg >> count);
      else
        multiplicand <= multiplicand - (dividend_reg >> count);
      count <= count + 1;
    end else begin
      quotient_reg <= multiplicand;
      if (sign == 1'b1)
        quotient_reg <= -quotient_reg;
    end
  end

  always @(posedge clk) begin
    if (count < 4'b1000) begin
      if (multiplier[count] == 1'b1)
        multiplier <= multiplier + (divisor_reg >> count);
      else
        multiplier <= multiplier - (divisor_reg >> count);
      count <= count + 1;
    end else begin
      sign <= ~sign;
    end
  end

  assign quotient = quotient_reg;

endmodule